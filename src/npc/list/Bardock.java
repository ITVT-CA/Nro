package npc.list;
import consts.ConstNpc;
import item.Item;
import npc.Npc;
import player.Player;
import player.Service.InventoryService;
import services.ItemService;
import services.Service;
import services.TaskService;
import utils.Util;

public class Bardock extends Npc {

    public Bardock(int mapId, int status, int cx, int cy, int tempId, int avartar) {
        super(mapId, status, cx, cy, tempId, avartar);
    }

    @Override
    public void openBaseMenu(Player player) {
        if (canOpenNpc(player)) {
            if (!TaskService.gI().checkDoneTaskTalkNpc(player, this)) {
                this.createOtherMenu(player, ConstNpc.BASE_MENU,
                    "C·ª¨A H√ÄNG QUAY TH∆Ø·ªûNG VIP \n" +
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n" +
                    "QUAY C·∫¢I TRANG:\n" +
                    "‚Ä¢ C·∫£i trang Rose: Ch·ªâ s·ªë MAX---" +
                    "‚Ä¢ C·∫£i trang VIP: 35-50 ch·ªâ s·ªë\n" +
                    "‚Ä¢ Gi√°p luy·ªán t·∫≠p c·∫•p 4---" +
                    "‚Ä¢ C·∫£i trang th∆∞·ªùng: 30 ch·ªâ s·ªë\n" +
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n" +
                    "QUAY PET:\n" +
                    "‚Ä¢ Pet VIP: Ch·ªâ s·ªë cao---" +
                    "‚Ä¢ Pet th∆∞·ªùng: Ch·ªâ s·ªë trung b√¨nh\n" +
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n" +
                    " QUAY V√ÅN BAY:\n" +
                    "‚Ä¢ V√°n bay VIP: Ch·ªâ s·ªë  cao---" +
                    "‚Ä¢ V√°n bay th∆∞·ªùng: Ch·ªâ s·ªë b√¨nh th∆∞·ªùng\n" +
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n" +
                    "QUAY TH√ö ƒêEO L∆ØNG:\n" +
                    "‚Ä¢ Th√∫ ƒëeo l∆∞ng VIP: Ch·ªâ s·ªë cao---" +
                    "‚Ä¢ Th√∫ ƒëeo l∆∞ng th∆∞·ªùng: Ch·ªâ s·ªë b√¨nh th∆∞·ªùng\n" +
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
                    " Quay C·∫£i Trang\n", 
                    "Quay Pet\n", 
                    "Quay V√°n Bay\n", 
                    "Quay Th√∫ ƒêeo L∆∞ng\n",
                    "ƒê√≥ng");
            }
        }
    }

    @Override
    public void confirmMenu(Player player, int select) {
        if (canOpenNpc(player)) {
            if (player.idMark.isBaseMenu()) {
                switch (select) {
                    case 0 -> { // Quay C·∫£i Trang
                        quayCaiTrang(player);
                    }
                    case 1 -> { // Quay Pet
                        quayPet(player);
                    }
                    case 2 -> { // Quay V√°n Bay
                        quayVanBay(player);
                    }
                    case 3 -> { // Quay Th√∫ ƒêeo L∆∞ng
                        quayThuDeoLung(player);
                    }
                    case 4 -> { // ƒê√≥ng
                        Service.gI().sendThongBao(player, "H·∫πn g·∫∑p l·∫°i b·∫°n!");
                    }
                }
            }
        }
    }
    
    // H√†m quay c·∫£i trang
    private void quayCaiTrang(Player player) {
        Item ticketItem = InventoryService.gI().findItemBag(player, 1730);
        if (ticketItem == null || ticketItem.quantity <= 0) {
            Service.gI().sendThongBao(player, "üé≠ B·∫°n kh√¥ng c√≥ v√© quay c·∫£i trang !");
            return;
        }
        
        if (InventoryService.gI().getCountEmptyBag(player) <= 0) {
            Service.gI().sendThongBao(player, " H√†nh trang ƒë·∫ßy, kh√¥ng th·ªÉ nh·∫≠n th∆∞·ªüng!");
            return;
        }
        
        // Tr·ª´ v√© quay
        InventoryService.gI().subQuantityItemsBag(player, ticketItem, 1);
        InventoryService.gI().sendItemBags(player);
        
        // Danh s√°ch item th∆∞·ªùng
        int[] itemIds = {421, 422, 450, 549, 528, 612, 613, 614};
        // Danh s√°ch item VIP
        int[] itemIdsVIP = {1731, 1557, 1590, 1732, 1587, 1743, 1716};
        
        // 10% VIP, 90% th∆∞·ªùng
        short selectedItemId;
        int chance = Util.nextInt(1, 100);
        
        if (chance <= 10) {
            int randomIndex = Util.nextInt(0, itemIdsVIP.length - 1);
            selectedItemId = (short) itemIdsVIP[randomIndex];
        } else {
            int randomIndex = Util.nextInt(0, itemIds.length - 1);
            selectedItemId = (short) itemIds[randomIndex];
        }
        
        Item item = ItemService.gI().createNewItem(selectedItemId);
        
        // Th√™m option cho c·∫£i trang
        if (selectedItemId >= 421 && selectedItemId <= 614) {
            item.itemOptions.add(new Item.ItemOption(50, Util.nextInt(20, 30)));
            item.itemOptions.add(new Item.ItemOption(77, Util.nextInt(20, 30)));
            item.itemOptions.add(new Item.ItemOption(103, Util.nextInt(20, 30)));
        } else if (selectedItemId == 1731) {
            item.itemOptions.add(new Item.ItemOption(50, 50));
            item.itemOptions.add(new Item.ItemOption(77, 50));
            item.itemOptions.add(new Item.ItemOption(103, 50));
        } else if (selectedItemId == 1557 || selectedItemId == 1590 || selectedItemId == 1732 || selectedItemId == 1587 || selectedItemId == 1743) {
            item.itemOptions.add(new Item.ItemOption(50, Util.nextInt(35, 50)));
            item.itemOptions.add(new Item.ItemOption(77, Util.nextInt(35, 50)));
            item.itemOptions.add(new Item.ItemOption(103, Util.nextInt(35, 50)));
        }
        
        InventoryService.gI().addItemBag(player, item);
        InventoryService.gI().sendItemBags(player);
        Service.gI().sendThongBao(player, "üé≠ B·∫°n nh·∫≠n ƒë∆∞·ª£c: " + item.template.name);
    }
    
    // H√†m quay pet
    private void quayPet(Player player) {
        Item ticketItem = InventoryService.gI().findItemBag(player, 1730);
        if (ticketItem == null || ticketItem.quantity <= 0) {
            Service.gI().sendThongBao(player, "üêæ B·∫°n kh√¥ng c√≥ v√© quay pet!");
            return;
        }
        
        if (InventoryService.gI().getCountEmptyBag(player) <= 0) {
            Service.gI().sendThongBao(player, "H√†nh trang ƒë·∫ßy, kh√¥ng th·ªÉ nh·∫≠n th∆∞·ªüng!");
            return;
        }
        
        // Tr·ª´ v√© quay
        InventoryService.gI().subQuantityItemsBag(player, ticketItem, 1);
        InventoryService.gI().sendItemBags(player);
        
        // Danh s√°ch pet th∆∞·ªùng
        int[] petIds = {1458,1551,16,17,18,19}; // Pet th∆∞·ªùng
        // Danh s√°ch pet VIP
        int[] petIdsVIP = {1631,1573}; // Pet VIP
        
        // 15% VIP, 85% th∆∞·ªùng
        short selectedPetId;
        int chance = Util.nextInt(1, 100);
        
        if (chance <= 15) {
            int randomIndex = Util.nextInt(0, petIdsVIP.length - 1);
            selectedPetId = (short) petIdsVIP[randomIndex];
        } else {
            int randomIndex = Util.nextInt(0, petIds.length - 1);
            selectedPetId = (short) petIds[randomIndex];
        }
        
        Item pet = ItemService.gI().createNewItem(selectedPetId);
        
        // Th√™m option cho pet (tr·ª´ ID 16, 17, 18, 19)
        if (selectedPetId != 16 && selectedPetId != 17 && selectedPetId != 18 && selectedPetId != 19) {
            if (chance <= 15) {
                // Pet VIP
                pet.itemOptions.add(new Item.ItemOption(50, Util.nextInt(15, 20)));
                pet.itemOptions.add(new Item.ItemOption(77, Util.nextInt(15, 20)));
                pet.itemOptions.add(new Item.ItemOption(103, Util.nextInt(15, 20)));
            } else {
                // Pet th∆∞·ªùng
                pet.itemOptions.add(new Item.ItemOption(50, Util.nextInt(5, 15)));
                pet.itemOptions.add(new Item.ItemOption(77, Util.nextInt(5, 15)));
                pet.itemOptions.add(new Item.ItemOption(103, Util.nextInt(5, 15)));
            }
        }
        
        InventoryService.gI().addItemBag(player, pet);
        InventoryService.gI().sendItemBags(player);
        Service.gI().sendThongBao(player, "üêæ B·∫°n nh·∫≠n ƒë∆∞·ª£c: " + pet.template.name);
    }
    
    // H√†m quay v√°n bay
    private void quayVanBay(Player player) {
        Item ticketItem = InventoryService.gI().findItemBag(player, 1730);
        if (ticketItem == null || ticketItem.quantity <= 0) {
            Service.gI().sendThongBao(player, "B·∫°n kh√¥ng c√≥ v√© quay !");
            return;
        }
        
        if (InventoryService.gI().getCountEmptyBag(player) <= 0) {
            Service.gI().sendThongBao(player, "H√†nh trang ƒë·∫ßy, kh√¥ng th·ªÉ nh·∫≠n th∆∞·ªüng!");
            return;
        }
        
        // Tr·ª´ v√© quay
        InventoryService.gI().subQuantityItemsBag(player, ticketItem, 1);
        InventoryService.gI().sendItemBags(player);
        
        // Danh s√°ch v√°n bay th∆∞·ªùng
        int[] vanBayIds = {1603, 1711, 16,18,19,20}; // V√°n bay th∆∞·ªùng
        // Danh s√°ch v√°n bay VIP
        int[] vanBayIdsVIP = {1734, 1733}; // V√°n bay VIP
        
        // 20% VIP, 80% th∆∞·ªùng
        short selectedVanBayId;
        int chance = Util.nextInt(1, 100);
        
        if (chance <= 20) {
            int randomIndex = Util.nextInt(0, vanBayIdsVIP.length - 1);
            selectedVanBayId = (short) vanBayIdsVIP[randomIndex];
        } else {
            int randomIndex = Util.nextInt(0, vanBayIds.length - 1);
            selectedVanBayId = (short) vanBayIds[randomIndex];
        }
        
        Item vanBay = ItemService.gI().createNewItem(selectedVanBayId);
        
        // Th√™m option cho v√°n bay (tr·ª´ ID 16, 17, 18, 19)
        if (selectedVanBayId != 16 && selectedVanBayId != 17 && selectedVanBayId != 18 && selectedVanBayId != 19) {
            if (chance <= 20) {
                // V√°n bay VIP
                vanBay.itemOptions.add(new Item.ItemOption(50, Util.nextInt(15, 20)));
                vanBay.itemOptions.add(new Item.ItemOption(77, Util.nextInt(15, 20)));
                vanBay.itemOptions.add(new Item.ItemOption(103, Util.nextInt(15, 20)));
            } else {
                // V√°n bay th∆∞·ªùng
                vanBay.itemOptions.add(new Item.ItemOption(50, Util.nextInt(5, 15)));
                vanBay.itemOptions.add(new Item.ItemOption(77, Util.nextInt(5, 15)));
                vanBay.itemOptions.add(new Item.ItemOption(103, Util.nextInt(5, 15)));
            }
        }
        
        InventoryService.gI().addItemBag(player, vanBay);
        InventoryService.gI().sendItemBags(player);
        Service.gI().sendThongBao(player, "üõ∏ B·∫°n nh·∫≠n ƒë∆∞·ª£c: " + vanBay.template.name);
    }
    
    // H√†m quay th√∫ ƒëeo l∆∞ng
    private void quayThuDeoLung(Player player) {
        Item ticketItem = InventoryService.gI().findItemBag(player, 1730);
        if (ticketItem == null || ticketItem.quantity <= 0) {
            Service.gI().sendThongBao(player, "B·∫°n kh√¥ng c√≥ v√© quay th√∫ ƒëeo l∆∞ng!");
            return;
        }
        
        if (InventoryService.gI().getCountEmptyBag(player) <= 0) {
            Service.gI().sendThongBao(player, " H√†nh trang ƒë·∫ßy, kh√¥ng th·ªÉ nh·∫≠n th∆∞·ªüng!");
            return;
        }
        
        // Tr·ª´ v√© quay
        InventoryService.gI().subQuantityItemsBag(player, ticketItem, 1);
        InventoryService.gI().sendItemBags(player);
        
        // Danh s√°ch th√∫ ƒëeo l∆∞ng th∆∞·ªùng
        int[] thuDeoLungIds = {1670, 1669, 1679, 1680, 16,17,18,19}; // Th√∫ ƒëeo l∆∞ng th∆∞·ªùng
        // Danh s√°ch th√∫ ƒëeo l∆∞ng VIP
        int[] thuDeoLungIdsVIP = {1713, 1467, 1735, 1599}; // Th√∫ ƒëeo l∆∞ng VIP
        
        // 12% VIP, 88% th∆∞·ªùng
        short selectedThuDeoLungId;
        int chance = Util.nextInt(1, 100);
        
        if (chance <= 12) {
            int randomIndex = Util.nextInt(0, thuDeoLungIdsVIP.length - 1);
            selectedThuDeoLungId = (short) thuDeoLungIdsVIP[randomIndex];
        } else {
            int randomIndex = Util.nextInt(0, thuDeoLungIds.length - 1);
            selectedThuDeoLungId = (short) thuDeoLungIds[randomIndex];
        }
        
        Item thuDeoLung = ItemService.gI().createNewItem(selectedThuDeoLungId);
        
        // Th√™m option cho th√∫ ƒëeo l∆∞ng (tr·ª´ ID 16, 17, 18, 19)
        if (selectedThuDeoLungId != 16 && selectedThuDeoLungId != 17 && selectedThuDeoLungId != 18 && selectedThuDeoLungId != 19) {
            if (chance <= 12) {
                // Th√∫ ƒëeo l∆∞ng VIP - ch·ªâ s·ªë r·∫•t cao
                thuDeoLung.itemOptions.add(new Item.ItemOption(50, Util.nextInt(15, 20)));
                thuDeoLung.itemOptions.add(new Item.ItemOption(77, Util.nextInt(15, 20)));
                thuDeoLung.itemOptions.add(new Item.ItemOption(103, Util.nextInt(15, 20)));
            } else {
                // Th√∫ ƒëeo l∆∞ng th∆∞·ªùng - ch·ªâ s·ªë cao
                thuDeoLung.itemOptions.add(new Item.ItemOption(50, Util.nextInt(5, 15)));
                thuDeoLung.itemOptions.add(new Item.ItemOption(77, Util.nextInt(5, 15)));
                thuDeoLung.itemOptions.add(new Item.ItemOption(103, Util.nextInt(5, 15)));
            }
        }
        
        InventoryService.gI().addItemBag(player, thuDeoLung);
        InventoryService.gI().sendItemBags(player);
        Service.gI().sendThongBao(player, "B·∫°n nh·∫≠n ƒë∆∞·ª£c: " + thuDeoLung.template.name);
    }
}

